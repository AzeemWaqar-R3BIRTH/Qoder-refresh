id,category,payload,scenario,question,answer,hint,difficulty,score_weight
1,SQL Injection,""" or pg_sleep  (  __TIME__  )  --","Login form that checks username and password. In the real world, this vulnerability could lead to serious consequences like data exposure, unauthorized access, or system compromise. Attackers could exploit this vulnerability to perform malicious actions. In the real world, this vulnerability could lead to serious consequences like data exposure, unauthorized access, or system compromise. [UniqueID_36]","This payload was passed into a product search query: `"" or pg_sleep  (  __TIME__  )  --`. Identify the likely intention.","This payload attempts to bypass authentication by always making the WHERE clause evaluate as true. Mitigation: Ensure that user inputs are validated using proper methods such as parameterized queries for SQLi and sanitizing inputs. This attack can lead to serious consequences. Mitigation: For SQLi, always sanitize inputs and use appropriate security measures like prepared statements or output encoding. [UniqueID_97]","Try to make the WHERE clause always return a valid user. Try experimenting with different payloads. In SQLi, consider using logical conditions to bypass checks or inject malicious scripts. Focus on the parts of the query or input field where user data is being directly executed without validation. [UniqueID_93]",Beginner,10
2,SQL Injection,create user name identified by pass123 temporary tablespace temp default tablespace users;,"General-purpose input field embedded in backend SQL logic. In the real world, this vulnerability could lead to serious consequences like data exposure, unauthorized access, or system compromise. Attackers could exploit this vulnerability to perform malicious actions. In the real world, this vulnerability could lead to serious consequences like data exposure, unauthorized access, or system compromise. [UniqueID_31]","Given the payload `create user name identified by pass123 temporary tablespace temp default tablespace users;`, describe how it could bypass standard login validation.","This is a general SQL injection attempt, possibly for logic alteration or testing. Mitigation: Ensure that user inputs are validated using proper methods such as parameterized queries for SQLi and sanitizing inputs. This attack can lead to serious consequences. Mitigation: For SQLi, always sanitize inputs and use appropriate security measures like prepared statements or output encoding. [UniqueID_79]","Try to evaluate what this does to the SQL query logic. Try experimenting with different payloads. In SQLi, consider using logical conditions to bypass checks or inject malicious scripts. Focus on the parts of the query or input field where user data is being directly executed without validation. [UniqueID_81]",Intermediate,20
3,SQL Injection," AND 1  =  utl_inaddr.get_host_address   (    (   SELECT DISTINCT  (  table_name  )   FROM   (  SELECT DISTINCT  (  table_name  )  , ROWNUM AS LIMIT FROM sys.all_tables  )   WHERE LIMIT  =  5   )    )    AND 'i'  =  'i","Search field that injects results into a UNION-based SQL query. In the real world, this vulnerability could lead to serious consequences like data exposure, unauthorized access, or system compromise. Attackers could exploit this vulnerability to perform malicious actions. In the real world, this vulnerability could lead to serious consequences like data exposure, unauthorized access, or system compromise. [UniqueID_3]","The following payload was submitted in a feedback form: ` AND 1  =  utl_inaddr.get_host_address   (    (   SELECT DISTINCT  (  table_name  )   FROM   (  SELECT DISTINCT  (  table_name  )  , ROWNUM AS LIMIT FROM sys.all_tables  )   WHERE LIMIT  =  5   )    )    AND 'i'  =  'i`. Analyze the risk.","This payload exploits UNION queries to extract data from other tables. Mitigation: Ensure that user inputs are validated using proper methods such as parameterized queries for SQLi and sanitizing inputs. This attack can lead to serious consequences. Mitigation: For SQLi, always sanitize inputs and use appropriate security measures like prepared statements or output encoding. [UniqueID_5]","UNION is often used to append results from another query. Try experimenting with different payloads. In SQLi, consider using logical conditions to bypass checks or inject malicious scripts. Focus on the parts of the query or input field where user data is being directly executed without validation. [UniqueID_45]",Intermediate,20
81,SQL Injection,$  (  sleep 50  ) ,"Form field with backend timing behavior. In the real world, this vulnerability could lead to serious consequences like data exposure, unauthorized access, or system compromise. Attackers could exploit this vulnerability to perform malicious actions. In the real world, this vulnerability could lead to serious consequences like data exposure, unauthorized access, or system compromise. [UniqueID_56]","In an admin panel input field, this payload was logged: `$  (  sleep 50  ) `. What is its likely purpose?","This is a blind SQL injection using timing functions to infer data without seeing results. Mitigation: Ensure that user inputs are validated using proper methods such as parameterized queries for SQLi and sanitizing inputs. This attack can lead to serious consequences. Mitigation: For SQLi, always sanitize inputs and use appropriate security measures like prepared statements or output encoding. [UniqueID_22]","This type of injection uses response delay to detect if a condition is true. Try experimenting with different payloads. In SQLi, consider using logical conditions to bypass checks or inject malicious scripts. Focus on the parts of the query or input field where user data is being directly executed without validation. [UniqueID_65]",Advanced,30
448,SQL Injection, ; drop table temp --,"Text input directly concatenated into SQL command. In the real world, this vulnerability could lead to serious consequences like data exposure, unauthorized access, or system compromise. Attackers could exploit this vulnerability to perform malicious actions. In the real world, this vulnerability could lead to serious consequences like data exposure, unauthorized access, or system compromise. [UniqueID_44]",A system accepts user IDs as input. What could the payload ` ; drop table temp --` do in such a case?,"This payload attempts to perform destructive operations such as dropping tables. Mitigation: Ensure that user inputs are validated using proper methods such as parameterized queries for SQLi and sanitizing inputs. This attack can lead to serious consequences. Mitigation: For SQLi, always sanitize inputs and use appropriate security measures like prepared statements or output encoding. [UniqueID_90]","Focus on what the semicolon does and what follows it. Try experimenting with different payloads. In SQLi, consider using logical conditions to bypass checks or inject malicious scripts. Focus on the parts of the query or input field where user data is being directly executed without validation. [UniqueID_88]",Beginner,10
