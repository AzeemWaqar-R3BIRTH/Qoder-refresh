#!/usr/bin/env python3
"""
SecureTrainer Environment Setup Script
This script helps you create and configure your .env file for the SecureTrainer application.
"""

import os
import secrets
import string
from pathlib import Path

def generate_secret_key(length=32):
    """Generate a secure random secret key."""
    alphabet = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def create_env_file():
    """Create the .env file with user input."""
    print("üõ°Ô∏è SecureTrainer Environment Configuration")
    print("=" * 50)
    print("This script will help you create your .env file.")
    print("Press Enter to use default values where applicable.\n")
    
    # Check if .env already exists
    env_path = Path('.env')
    if env_path.exists():
        response = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("‚ùå Setup cancelled.")
            return False
    
    # Get user input
    print("\nüìß EMAIL CONFIGURATION")
    print("-" * 30)
    
    mail_server = input("Email server (default: smtp.gmail.com): ").strip() or "smtp.gmail.com"
    mail_port = input("Email port (default: 587): ").strip() or "587"
    mail_username = input("Email address: ").strip()
    mail_password = input("Email password/app password: ").strip()
    
    print("\nüóÑÔ∏è DATABASE CONFIGURATION")
    print("-" * 30)
    
    mongo_uri = input("MongoDB URI (default: mongodb://localhost:27017/securetrainer): ").strip() or "mongodb://localhost:27017/securetrainer"
    
    print("\nüîê SECURITY CONFIGURATION")
    print("-" * 30)
    
    # Generate a secure secret key
    secret_key = generate_secret_key(32)
    print(f"Generated secret key: {secret_key}")
    
    custom_key = input("Use custom secret key? (y/N): ").strip().lower()
    if custom_key == 'y':
        secret_key = input("Enter your secret key: ").strip()
    
    print("\n‚öôÔ∏è APPLICATION SETTINGS")
    print("-" * 30)
    
    port = input("Port (default: 5000): ").strip() or "5000"
    debug = input("Debug mode (y/N): ").strip().lower() or "n"
    debug = "True" if debug == 'y' else "False"
    
    # Create the .env content
    env_content = f"""# SecureTrainer Environment Configuration
# Generated by setup script

# Security
SECRET_KEY={secret_key}

# Email Configuration
MAIL_SERVER={mail_server}
MAIL_PORT={mail_port}
MAIL_USE_TLS=True
MAIL_USE_SSL=False
MAIL_USERNAME={mail_username}
MAIL_PASSWORD={mail_password}
MAIL_DEFAULT_SENDER=SecureTrainer <{mail_username}>

# Database
MONGO_URI={mongo_uri}
MONGO_DB_NAME=securetrainer

# Application Settings
FLASK_ENV=development
FLASK_DEBUG={debug}
HOST=0.0.0.0
PORT={port}
APP_URL=http://localhost:{port}

# AI/ML Models
MODEL_PATH=./model/challenge_difficulty_model.pkl
LABEL_ENCODER_PATH=./model/label_encoder.pkl
AI_ENABLED=True
AI_FALLBACK_ENABLED=True

# QR Code Settings
QR_STORAGE_PATH=./qr_codes
QR_EXPIRY_HOURS=24
QR_TOKEN_LENGTH=32

# Challenge System
MAX_HINTS_PER_CHALLENGE=3
HINT_PENALTY_PERCENTAGE=10
BASE_CHALLENGE_POINTS=100
LEVEL_UP_THRESHOLD=1000
ENABLED_CHALLENGES=sql_injection,xss,command_injection,authentication,csrf

# Gamification
POINTS_MULTIPLIER=1.0
BONUS_POINTS_ENABLED=True
STREAK_BONUS_ENABLED=True
ROLE_THRESHOLDS=1000,2500,5000,10000,20000
ROLE_NAMES=Trainee,Analyst,Specialist,Expert,Department Head

# Logging
LOG_LEVEL=INFO
LOG_FILE=./logs/securetrainer.log
LOG_MAX_SIZE=10MB
LOG_BACKUP_COUNT=5

# Security
SESSION_COOKIE_SECURE=False
SESSION_COOKIE_HTTPONLY=True
SESSION_COOKIE_SAMESITE=Lax
PERMANENT_SESSION_LIFETIME=3600
RATE_LIMIT_ENABLED=True
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=3600
CSRF_ENABLED=True
CSRF_TIME_LIMIT=3600

# Development
DEBUG={debug}
TESTING=False
AUTO_RELOAD=True

# Notifications
SEND_WELCOME_EMAIL=True
SEND_CHALLENGE_COMPLETION_EMAIL=True
SEND_PROMOTION_EMAIL=True
SEND_WEEKLY_PROGRESS_EMAIL=False

# Company Branding
COMPANY_NAME=SecureTrainer
COMPANY_WEBSITE=https://securetrainer.com
THEME_COLOR=#1e40af
ACCENT_COLOR=#f59e0b
SUCCESS_COLOR=#10b981
ERROR_COLOR=#ef4444
"""
    
    # Write the .env file
    try:
        with open(env_path, 'w') as f:
            f.write(env_content)
        
        print(f"\n‚úÖ .env file created successfully at {env_path.absolute()}")
        print("\nüìù Next steps:")
        print("1. Review the .env file and adjust settings if needed")
        print("2. Make sure your email credentials are correct")
        print("3. Ensure MongoDB is running (if using local database)")
        print("4. Run 'python start.py' to start the application")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False

def main():
    """Main function."""
    print("üöÄ Welcome to SecureTrainer Environment Setup!")
    
    # Change to the script's directory
    script_dir = Path(__file__).parent
    os.chdir(script_dir)
    
    # Create .env file
    if create_env_file():
        print("\nüéâ Environment setup completed successfully!")
    else:
        print("\n‚ùå Environment setup failed. Please check the errors above.")
        return 1
    
    return 0

if __name__ == '__main__':
    exit(main())
